{
  "Command Pattern": {
    "prefix": "command",
    "body": [
      "@FunctionalInterface",
      "public interface ${1:Command} {",
      "\tvoid execute();",
      "}",
      "",
      "public class ${2:Invoker} {",
      "\tprivate final Queue<${1:Command}> commands = new LinkedList<>();",
      "\t",
      "\tpublic void addCommand(${1:Command} command) {",
      "\t\tcommands.offer(command);",
      "\t}",
      "\t",
      "\tpublic void executeCommands() {",
      "\t\twhile (!commands.isEmpty()) {",
      "\t\t\tcommands.poll().execute();",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Creates command pattern"
  },
  "Repository Pattern": {
    "prefix": "repository",
    "body": [
      "public interface ${1:Entity}Repository {",
      "\t${1:Entity} findById(${2:Long} id);",
      "\tList<${1:Entity}> findAll();",
      "\tvoid save(${1:Entity} entity);",
      "\tvoid update(${1:Entity} entity);",
      "\tvoid delete(${2:Long} id);",
      "}",
      "",
      "public class ${1:Entity}RepositoryImpl implements ${1:Entity}Repository {",
      "\tprivate final Map<${2:Long}, ${1:Entity}> storage = new HashMap<>();",
      "\t",
      "\t@Override",
      "\tpublic ${1:Entity} findById(${2:Long} id) {",
      "\t\treturn storage.get(id);",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic List<${1:Entity}> findAll() {",
      "\t\treturn new ArrayList<>(storage.values());",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void save(${1:Entity} entity) {",
      "\t\tstorage.put(entity.getId(), entity);",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void update(${1:Entity} entity) {",
      "\t\tstorage.replace(entity.getId(), entity);",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void delete(${2:Long} id) {",
      "\t\tstorage.remove(id);",
      "\t}",
      "}"
    ],
    "description": "Creates repository pattern"
  },
  "DTO Class": {
    "prefix": "dto",
    "body": [
      "public class ${1:Entity}DTO {",
      "\tprivate ${2:Long} id;",
      "\tprivate ${3:String} name;",
      "\t",
      "\tpublic ${1:Entity}DTO() {}",
      "\t",
      "\tpublic ${1:Entity}DTO(${2:Long} id, ${3:String} name) {",
      "\t\tthis.id = id;",
      "\t\tthis.name = name;",
      "\t}",
      "\t",
      "\t// Getters and Setters",
      "\tpublic ${2:Long} getId() { return id; }",
      "\tpublic void setId(${2:Long} id) { this.id = id; }",
      "\t",
      "\tpublic ${3:String} getName() { return name; }",
      "\tpublic void setName(${3:String} name) { this.name = name; }",
      "}"
    ],
    "description": "Creates Data Transfer Object"
  },
  "Service Class": {
    "prefix": "service",
    "body": [
      "@Service",
      "public class ${1:Entity}Service {",
      "\t",
      "\tprivate final ${1:Entity}Repository repository;",
      "\t",
      "\tpublic ${1:Entity}Service(${1:Entity}Repository repository) {",
      "\t\tthis.repository = repository;",
      "\t}",
      "\t",
      "\tpublic ${1:Entity} get${1:Entity}ById(${2:Long} id) {",
      "\t\treturn repository.findById(id);",
      "\t}",
      "\t",
      "\tpublic List<${1:Entity}> getAll${1:Entity}s() {",
      "\t\treturn repository.findAll();",
      "\t}",
      "\t",
      "\tpublic void create${1:Entity}(${1:Entity} entity) {",
      "\t\trepository.save(entity);",
      "\t}",
      "\t",
      "\tpublic void update${1:Entity}(${1:Entity} entity) {",
      "\t\trepository.update(entity);",
      "\t}",
      "\t",
      "\tpublic void delete${1:Entity}(${2:Long} id) {",
      "\t\trepository.delete(id);",
      "\t}",
      "}"
    ],
    "description": "Creates service class"
  },
  "Controller Class (Spring)": {
    "prefix": "controller",
    "body": [
      "@RestController",
      "@RequestMapping(\"/api/${1:entities}\")",
      "public class ${2:Entity}Controller {",
      "\t",
      "\tprivate final ${2:Entity}Service service;",
      "\t",
      "\tpublic ${2:Entity}Controller(${2:Entity}Service service) {",
      "\t\tthis.service = service;",
      "\t}",
      "\t",
      "\t@GetMapping(\"/{id}\")",
      "\tpublic ResponseEntity<${2:Entity}> get${2:Entity}(@PathVariable ${3:Long} id) {",
      "\t\t${2:Entity} entity = service.get${2:Entity}ById(id);",
      "\t\treturn ResponseEntity.ok(entity);",
      "\t}",
      "\t",
      "\t@GetMapping",
      "\tpublic ResponseEntity<List<${2:Entity}>> getAll${2:Entity}s() {",
      "\t\treturn ResponseEntity.ok(service.getAll${2:Entity}s());",
      "\t}",
      "\t",
      "\t@PostMapping",
      "\tpublic ResponseEntity<${2:Entity}> create${2:Entity}(@RequestBody ${2:Entity} entity) {",
      "\t\tservice.create${2:Entity}(entity);",
      "\t\treturn ResponseEntity.status(HttpStatus.CREATED).body(entity);",
      "\t}",
      "\t",
      "\t@PutMapping(\"/{id}\")",
      "\tpublic ResponseEntity<${2:Entity}> update${2:Entity}(@PathVariable ${3:Long} id, @RequestBody ${2:Entity} entity) {",
      "\t\tentity.setId(id);",
      "\t\tservice.update${2:Entity}(entity);",
      "\t\treturn ResponseEntity.ok(entity);",
      "\t}",
      "\t",
      "\t@DeleteMapping(\"/{id}\")",
      "\tpublic ResponseEntity<Void> delete${2:Entity}(@PathVariable ${3:Long} id) {",
      "\t\tservice.delete${2:Entity}(id);",
      "\t\treturn ResponseEntity.noContent().build();",
      "\t}",
      "}"
    ],
    "description": "Creates Spring REST controller"
  },
  "Entity Class (JPA)": {
    "prefix": "entity",
    "body": [
      "@Entity",
      "@Table(name = \"${1:table_name}\")",
      "public class ${2:Entity} {",
      "\t",
      "\t@Id",
      "\t@GeneratedValue(strategy = GenerationType.IDENTITY)",
      "\tprivate ${3:Long} id;",
      "\t",
      "\t@Column(name = \"${4:column_name}\", nullable = false)",
      "\tprivate ${5:String} ${6:field};",
      "\t",
      "\t@CreatedDate",
      "\t@Column(name = \"created_at\", updatable = false)",
      "\tprivate LocalDateTime createdAt;",
      "\t",
      "\t@LastModifiedDate",
      "\t@Column(name = \"updated_at\")",
      "\tprivate LocalDateTime updatedAt;",
      "\t",
      "\t// Constructors",
      "\tpublic ${2:Entity}() {}",
      "\t",
      "\tpublic ${2:Entity}(${5:String} ${6:field}) {",
      "\t\tthis.${6:field} = ${6:field};",
      "\t}",
      "\t",
      "\t// Getters and Setters",
      "\tpublic ${3:Long} getId() { return id; }",
      "\tpublic void setId(${3:Long} id) { this.id = id; }",
      "\t",
      "\tpublic ${5:String} get${6/(.*)/${1:/capitalize}/}() { return ${6:field}; }",
      "\tpublic void set${6/(.*)/${1:/capitalize}/}(${5:String} ${6:field}) { this.${6:field} = ${6:field}; }",
      "\t",
      "\tpublic LocalDateTime getCreatedAt() { return createdAt; }",
      "\tpublic LocalDateTime getUpdatedAt() { return updatedAt; }",
      "}"
    ],
    "description": "Creates JPA entity class"
  },
  "Configuration Class (Spring)": {
    "prefix": "config",
    "body": [
      "@Configuration",
      "@EnableWebMvc",
      "public class ${1:AppConfig} {",
      "\t",
      "\t@Bean",
      "\tpublic ${2:ObjectMapper} ${3:objectMapper}() {",
      "\t\treturn new ${2:ObjectMapper}();",
      "\t}",
      "\t",
      "\t$0",
      "}"
    ],
    "description": "Creates Spring configuration class"
  },
  "Component Class (Spring)": {
    "prefix": "component",
    "body": [
      "@Component",
      "public class ${1:ComponentName} {",
      "\t",
      "\tprivate final Logger logger = LoggerFactory.getLogger(${1:ComponentName}.class);",
      "\t",
      "\tpublic void ${2:doSomething}() {",
      "\t\tlogger.info(\"${3:Doing something}\");",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates Spring component"
  },
  "Exception Handler (Spring)": {
    "prefix": "exhandler",
    "body": [
      "@ControllerAdvice",
      "public class ${1:GlobalExceptionHandler} {",
      "\t",
      "\t@ExceptionHandler(${2:NotFoundException}.class)",
      "\tpublic ResponseEntity<${3:ErrorResponse}> handle${2:NotFoundException}(${2:NotFoundException} ex) {",
      "\t\t${3:ErrorResponse} error = new ${3:ErrorResponse}(ex.getMessage(), HttpStatus.NOT_FOUND.value());",
      "\t\treturn ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);",
      "\t}",
      "\t",
      "\t@ExceptionHandler(Exception.class)",
      "\tpublic ResponseEntity<${3:ErrorResponse}> handleGenericException(Exception ex) {",
      "\t\t${3:ErrorResponse} error = new ${3:ErrorResponse}(\"Internal Server Error\", HttpStatus.INTERNAL_SERVER_ERROR.value());",
      "\t\treturn ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);",
      "\t}",
      "}"
    ],
    "description": "Creates Spring exception handler"
  },
  "Custom Exception": {
    "prefix": "customex",
    "body": [
      "public class ${1:CustomException} extends ${2:RuntimeException} {",
      "\t",
      "\tpublic ${1:CustomException}(String message) {",
      "\t\tsuper(message);",
      "\t}",
      "\t",
      "\tpublic ${1:CustomException}(String message, Throwable cause) {",
      "\t\tsuper(message, cause);",
      "\t}",
      "\t",
      "\tpublic ${1:CustomException}(Throwable cause) {",
      "\t\tsuper(cause);",
      "\t}",
      "}"
    ],
    "description": "Creates custom exception class"
  },
  "Aspect (Spring AOP)": {
    "prefix": "aspect",
    "body": [
      "@Aspect",
      "@Component",
      "public class ${1:LoggingAspect} {",
      "\t",
      "\tprivate final Logger logger = LoggerFactory.getLogger(${1:LoggingAspect}.class);",
      "\t",
      "\t@Before(\"@annotation(${2:Loggable})\")",
      "\tpublic void logBefore(JoinPoint joinPoint) {",
      "\t\tlogger.info(\"Entering method: {} with arguments: {}\",",
      "\t\t\tjoinPoint.getSignature().getName(),",
      "\t\t\tArrays.toString(joinPoint.getArgs()));",
      "\t}",
      "\t",
      "\t@AfterReturning(pointcut = \"@annotation(${2:Loggable})\", returning = \"result\")",
      "\tpublic void logAfterReturning(JoinPoint joinPoint, Object result) {",
      "\t\tlogger.info(\"Method {} returned: {}\",",
      "\t\t\tjoinPoint.getSignature().getName(),",
      "\t\t\tresult);",
      "\t}",
      "\t",
      "\t@AfterThrowing(pointcut = \"@annotation(${2:Loggable})\", throwing = \"error\")",
      "\tpublic void logAfterThrowing(JoinPoint joinPoint, Throwable error) {",
      "\t\tlogger.error(\"Method {} threw exception: {}\",",
      "\t\t\tjoinPoint.getSignature().getName(),",
      "\t\t\terror.getMessage());",
      "\t}",
      "}"
    ],
    "description": "Creates Spring AOP aspect"
  },
  "Custom Annotation": {
    "prefix": "annotation",
    "body": [
      "@Target({ElementType.${1:METHOD}})",
      "@Retention(RetentionPolicy.RUNTIME)",
      "@Documented",
      "public @interface ${2:CustomAnnotation} {",
      "\tString value() default \"\";",
      "\tboolean required() default true;",
      "}"
    ],
    "description": "Creates custom annotation"
  },
  "Validation Annotation": {
    "prefix": "validanno",
    "body": [
      "@Target({ElementType.FIELD, ElementType.PARAMETER})",
      "@Retention(RetentionPolicy.RUNTIME)",
      "@Constraint(validatedBy = ${1:CustomValidator}.class)",
      "@Documented",
      "public @interface ${2:Valid}${3:Custom} {",
      "\tString message() default \"Invalid ${3:custom} value\";",
      "\tClass<?>[] groups() default {};",
      "\tClass<? extends Payload>[] payload() default {};",
      "}"
    ],
    "description": "Creates validation annotation"
  },
  "Custom Validator": {
    "prefix": "validator",
    "body": [
      "public class ${1:CustomValidator} implements ConstraintValidator<${2:ValidCustom}, ${3:String}> {",
      "\t",
      "\t@Override",
      "\tpublic void initialize(${2:ValidCustom} annotation) {",
      "\t\t// Initialization logic",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic boolean isValid(${3:String} value, ConstraintValidatorContext context) {",
      "\t\tif (value == null) {",
      "\t\t\treturn true; // Let @NotNull handle null checks",
      "\t\t}",
      "\t\t$0",
      "\t\treturn ${4:validation logic};",
      "\t}",
      "}"
    ],
    "description": "Creates custom validator"
  },
  "Filter (Servlet)": {
    "prefix": "filter",
    "body": [
      "@Component",
      "public class ${1:CustomFilter} implements Filter {",
      "\t",
      "\tprivate final Logger logger = LoggerFactory.getLogger(${1:CustomFilter}.class);",
      "\t",
      "\t@Override",
      "\tpublic void init(FilterConfig filterConfig) {",
      "\t\tlogger.info(\"Initializing filter: {}\", getClass().getSimpleName());",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)",
      "\t\t\tthrows IOException, ServletException {",
      "\t\t",
      "\t\tHttpServletRequest httpRequest = (HttpServletRequest) request;",
      "\t\tHttpServletResponse httpResponse = (HttpServletResponse) response;",
      "\t\t",
      "\t\tlogger.info(\"Processing request: {} {}\", httpRequest.getMethod(), httpRequest.getRequestURI());",
      "\t\t",
      "\t\t// Pre-processing",
      "\t\t$0",
      "\t\t",
      "\t\tchain.doFilter(request, response);",
      "\t\t",
      "\t\t// Post-processing",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void destroy() {",
      "\t\tlogger.info(\"Destroying filter: {}\", getClass().getSimpleName());",
      "\t}",
      "}"
    ],
    "description": "Creates servlet filter"
  },
  "Interceptor (Spring)": {
    "prefix": "interceptor",
    "body": [
      "@Component",
      "public class ${1:CustomInterceptor} implements HandlerInterceptor {",
      "\t",
      "\tprivate final Logger logger = LoggerFactory.getLogger(${1:CustomInterceptor}.class);",
      "\t",
      "\t@Override",
      "\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {",
      "\t\tlogger.info(\"Pre-handle: {} {}\", request.getMethod(), request.getRequestURI());",
      "\t\t$0",
      "\t\treturn true;",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void postHandle(HttpServletRequest request, HttpServletResponse response,",
      "\t\t\tObject handler, ModelAndView modelAndView) {",
      "\t\tlogger.info(\"Post-handle: {} {}\", request.getMethod(), request.getRequestURI());",
      "\t}",
      "\t",
      "\t@Override",
      "\tpublic void afterCompletion(HttpServletRequest request, HttpServletResponse response,",
      "\t\t\tObject handler, Exception ex) {",
      "\t\tlogger.info(\"After completion: {} {}\", request.getMethod(), request.getRequestURI());",
      "\t\tif (ex != null) {",
      "\t\t\tlogger.error(\"Request failed with exception\", ex);",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Creates Spring interceptor"
  },
  "Advanced Record with Builder Pattern": {
    "prefix": "recbuilder",
    "body": [
      "public record ${1:RecordName}(",
      "\t${2:String name},",
      "\t${3:int age}",
      ") {",
      "\tpublic static Builder builder() {"
    ],
    "description": "Creates advanced record with builder pattern"
  },
  "Public Static Void Main": {
    "prefix": "psvm",
    "body": ["public static void main(String[] args) {", "\t$0", "}"],
    "description": "Creates main method"
  },
  "Public Class with Main": {
    "prefix": "pc",
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} {",
      "",
      "\tpublic static void main(String[] args) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates public class with main method"
  },
  "System.out.println": {
    "prefix": "sout",
    "body": ["System.out.println($0);"],
    "description": "System.out.println"
  },
  "System.out.printf": {
    "prefix": "souf",
    "body": ["System.out.printf(\"$1\", $0);"],
    "description": "System.out.printf"
  },
  "System.out.print": {
    "prefix": "sop",
    "body": ["System.out.print($0);"],
    "description": "System.out.print"
  },
  "For Loop": {
    "prefix": "fori",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {",
      "\t$0",
      "}"
    ],
    "description": "Creates for loop"
  },
  "Enhanced For Loop": {
    "prefix": "fore",
    "body": ["for (${1:String} ${2:item} : ${3:collection}) {", "\t$0", "}"],
    "description": "Creates enhanced for loop"
  },
  "While Loop": {
    "prefix": "whil",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "Creates while loop"
  },
  "Do While Loop": {
    "prefix": "dow",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Creates do-while loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "Creates if statement"
  },
  "If Else Statement": {
    "prefix": "ife",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
    "description": "Creates if-else statement"
  },
  "If Else If Statement": {
    "prefix": "ifei",
    "body": [
      "if (${1:condition}) {",
      "\t$3",
      "} else if (${2:condition}) {",
      "\t$4",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "Creates if-else if-else statement"
  },
  "Switch Statement": {
    "prefix": "sw",
    "body": [
      "switch (${1:expression}) {",
      "\tcase ${2:value}:",
      "\t\t$3",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t$0",
      "\t\tbreak;",
      "}"
    ],
    "description": "Creates switch statement"
  },
  "Switch Expression (Java 14+)": {
    "prefix": "swe",
    "body": [
      "var ${1:result} = switch (${2:expression}) {",
      "\tcase ${3:value} -> ${4:result};",
      "\tdefault -> $0;",
      "};"
    ],
    "description": "Creates switch expression"
  },
  "Try Catch": {
    "prefix": "try",
    "body": ["try {", "\t$1", "} catch (${2:Exception} e) {", "\t$0", "}"],
    "description": "Creates try-catch block"
  },
  "Try Catch Finally": {
    "prefix": "tryf",
    "body": [
      "try {",
      "\t$1",
      "} catch (${2:Exception} e) {",
      "\t$3",
      "} finally {",
      "\t$0",
      "}"
    ],
    "description": "Creates try-catch-finally block"
  },
  "Try With Resources": {
    "prefix": "twr",
    "body": [
      "try (${1:AutoCloseable resource} = ${2:initResource}) {",
      "\t$0",
      "} catch (${3:Exception} e) {",
      "\t$4",
      "}"
    ],
    "description": "Creates try-with-resources"
  },
  "Public Class": {
    "prefix": "cl",
    "body": ["public class ${1:${TM_FILENAME_BASE}} {", "", "\t$0", "}"],
    "description": "Creates public class"
  },
  "Public Class with Constructor": {
    "prefix": "pcc",
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} {",
      "",
      "\tpublic ${1:${TM_FILENAME_BASE}}() {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates public class with constructor"
  },
  "Public Class with Fields": {
    "prefix": "pcf",
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} {",
      "",
      "\tprivate ${2:String} ${3:field};",
      "",
      "\tpublic ${1:${TM_FILENAME_BASE}}(${2:String} ${3:field}) {",
      "\t\tthis.${3:field} = ${3:field};",
      "\t}",
      "",
      "\tpublic ${2:String} get${3/(.*)/${1:/capitalize}/}() {",
      "\t\treturn ${3:field};",
      "\t}",
      "",
      "\tpublic void set${3/(.*)/${1:/capitalize}/}(${2:String} ${3:field}) {",
      "\t\tthis.${3:field} = ${3:field};",
      "\t}",
      "",
      "\t$0",
      "}"
    ],
    "description": "Creates public class with field, constructor, and getters/setters"
  },
  "POJO Class": {
    "prefix": "pojo",
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} {",
      "",
      "\tprivate ${2:String} ${3:field1};",
      "\tprivate ${4:int} ${5:field2};",
      "",
      "\tpublic ${1:${TM_FILENAME_BASE}}() {}",
      "",
      "\tpublic ${1:${TM_FILENAME_BASE}}(${2:String} ${3:field1}, ${4:int} ${5:field2}) {",
      "\t\tthis.${3:field1} = ${3:field1};",
      "\t\tthis.${5:field2} = ${5:field2};",
      "\t}",
      "",
      "\tpublic ${2:String} get${3/(.*)/${1:/capitalize}/}() { return ${3:field1}; }",
      "\tpublic void set${3/(.*)/${1:/capitalize}/}(${2:String} ${3:field1}) { this.${3:field1} = ${3:field1}; }",
      "",
      "\tpublic ${4:int} get${5/(.*)/${1:/capitalize}/}() { return ${5:field2}; }",
      "\tpublic void set${5/(.*)/${1:/capitalize}/}(${4:int} ${5:field2}) { this.${5:field2} = ${5:field2}; }",
      "",
      "\t$0",
      "}"
    ],
    "description": "Creates complete POJO class"
  },
  "Abstract Class": {
    "prefix": "acl",
    "body": ["public abstract class ${1:${TM_FILENAME_BASE}} {", "\t$0", "}"],
    "description": "Creates abstract class"
  },
  "Interface": {
    "prefix": "int",
    "body": ["public interface ${1:${TM_FILENAME_BASE}} {", "\t$0", "}"],
    "description": "Creates interface"
  },
  "Enum": {
    "prefix": "en",
    "body": [
      "public enum ${1:${TM_FILENAME_BASE}} {",
      "\t${2:CONSTANT1},",
      "\t${3:CONSTANT2};",
      "\t",
      "\t$0",
      "}"
    ],
    "description": "Creates enum"
  },
  "Private Field": {
    "prefix": "pf",
    "body": ["private ${1:String} ${2:field};"],
    "description": "Creates private field"
  },
  "Public Field": {
    "prefix": "puf",
    "body": ["public ${1:String} ${2:field};"],
    "description": "Creates public field"
  },
  "Protected Field": {
    "prefix": "prof",
    "body": ["protected ${1:String} ${2:field};"],
    "description": "Creates protected field"
  },
  "Static Field": {
    "prefix": "psf",
    "body": ["private static final ${1:String} ${2:CONSTANT} = ${3:value};"],
    "description": "Creates private static final field"
  },
  "Public Method": {
    "prefix": "pm",
    "body": [
      "public ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates public method"
  },
  "Private Method": {
    "prefix": "prm",
    "body": [
      "private ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates private method"
  },
  "Protected Method": {
    "prefix": "prom",
    "body": [
      "protected ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates protected method"
  },
  "Static Method": {
    "prefix": "psm",
    "body": [
      "public static ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates public static method"
  },
  "Public Static Int Method": {
    "prefix": "psint",
    "body": [
      "public static int ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Creates public static int method"
  },
  "Public Static Boolean Method": {
    "prefix": "psbool",
    "body": [
      "public static boolean ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn false;",
      "}"
    ],
    "description": "Creates public static boolean method"
  },
  "Public Static String Method": {
    "prefix": "psstr",
    "body": [
      "public static String ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn null;",
      "}"
    ],
    "description": "Creates public static String method"
  },
  "Public Static Double Method": {
    "prefix": "psdbl",
    "body": [
      "public static double ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0.0;",
      "}"
    ],
    "description": "Creates public static double method"
  },
  "Public Static Long Method": {
    "prefix": "pslong",
    "body": [
      "public static long ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0L;",
      "}"
    ],
    "description": "Creates public static long method"
  },
  "Public Static Float Method": {
    "prefix": "psfloat",
    "body": [
      "public static float ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0.0f;",
      "}"
    ],
    "description": "Creates public static float method"
  },
  "Public Static Char Method": {
    "prefix": "pschar",
    "body": [
      "public static char ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn '\\0';",
      "}"
    ],
    "description": "Creates public static char method"
  },
  "Public Static Byte Method": {
    "prefix": "psbyte",
    "body": [
      "public static byte ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Creates public static byte method"
  },
  "Public Static Short Method": {
    "prefix": "psshort",
    "body": [
      "public static short ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Creates public static short method"
  },
  "Public Static Void Method": {
    "prefix": "psvoid",
    "description": "Creates public static void method",
    "body": [
      "public static void ${1:methodName}(${2:parameters}) {",
      "\t$0",
      "}"
    ]
  },
  "Public Static Generic Method": {
    "prefix": "psg",
    "body": [
      "public static <T> ${1:T} ${2:methodName}(${3:T param}) {",
      "\t$0",
      "\treturn ${3:param};",
      "}"
    ],
    "description": "Creates public static generic method"
  },
  "Private Static Method": {
    "prefix": "prsm",
    "body": [
      "private static ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates private static method"
  },
  "Protected Static Method": {
    "prefix": "prosm",
    "body": [
      "protected static ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates protected static method"
  },
  "Synchronized Method": {
    "prefix": "sync",
    "body": [
      "public synchronized ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates synchronized method"
  },
  "Abstract Method": {
    "prefix": "abm",
    "body": ["public abstract ${1:void} ${2:methodName}(${3:parameters});"],
    "description": "Creates abstract method"
  },
  "Final Method": {
    "prefix": "finm",
    "body": [
      "public final ${1:void} ${2:methodName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Creates final method"
  },
  "Native Method": {
    "prefix": "natm",
    "body": ["public native ${1:void} ${2:methodName}(${3:parameters});"],
    "description": "Creates native method declaration"
  },
  "Constructor": {
    "prefix": "con",
    "body": ["public ${1:${TM_FILENAME_BASE}}(${2:parameters}) {", "\t$0", "}"],
    "description": "Creates constructor"
  },
  "Default Constructor": {
    "prefix": "dcon",
    "body": ["public ${1:${TM_FILENAME_BASE}}() {", "\t$0", "}"],
    "description": "Creates default constructor"
  },
  "Copy Constructor": {
    "prefix": "ccon",
    "body": [
      "public ${1:${TM_FILENAME_BASE}}(${1:${TM_FILENAME_BASE}} other) {",
      "\tthis.${2:field} = other.${2:field};",
      "\t$0",
      "}"
    ],
    "description": "Creates copy constructor"
  },
  "Private Constructor (Singleton)": {
    "prefix": "pcon",
    "body": ["private ${1:${TM_FILENAME_BASE}}() {", "\t$0", "}"],
    "description": "Creates private constructor for singleton"
  },
  "Getter Method": {
    "prefix": "get",
    "body": [
      "public ${1:String} get${2:Property}() {",
      "\treturn ${3:property};",
      "}"
    ],
    "description": "Creates getter method"
  },
  "Setter Method": {
    "prefix": "set",
    "body": [
      "public void set${1:Property}(${2:String} ${3:property}) {",
      "\tthis.${3:property} = ${3:property};",
      "}"
    ],
    "description": "Creates setter method"
  },
  "Getter and Setter": {
    "prefix": "gs",
    "body": [
      "public ${1:String} get${2:Property}() {",
      "\treturn ${3:property};",
      "}",
      "",
      "public void set${2:Property}(${1:String} ${3:property}) {",
      "\tthis.${3:property} = ${3:property};",
      "}"
    ],
    "description": "Creates getter and setter methods"
  },
  "Boolean Getter (is)": {
    "prefix": "isget",
    "body": [
      "public boolean is${1:Property}() {",
      "\treturn ${2:property};",
      "}"
    ],
    "description": "Creates boolean getter with 'is' prefix"
  },
  "Fluent Setter": {
    "prefix": "fset",
    "body": [
      "public ${1:${TM_FILENAME_BASE}} set${2:Property}(${3:String} ${4:property}) {",
      "\tthis.${4:property} = ${4:property};",
      "\treturn this;",
      "}"
    ],
    "description": "Creates fluent setter (returns this)"
  },
  "ToString Method": {
    "prefix": "tostr",
    "body": [
      "@Override",
      "public String toString() {",
      "\treturn \"${1:${TM_FILENAME_BASE}}{\" +",
      "\t\t\"${2:field}='\" + ${2:field} + '\\'' +",
      "\t\t'}';",
      "}"
    ],
    "description": "Creates toString method"
  },
  "Equals Method": {
    "prefix": "eq",
    "body": [
      "@Override",
      "public boolean equals(Object obj) {",
      "\tif (this == obj) return true;",
      "\tif (obj == null || getClass() != obj.getClass()) return false;",
      "\t${1:${TM_FILENAME_BASE}} that = (${1:${TM_FILENAME_BASE}}) obj;",
      "\treturn Objects.equals(${2:field}, that.${2:field});",
      "}"
    ],
    "description": "Creates equals method"
  },
  "HashCode Method": {
    "prefix": "hc",
    "body": [
      "@Override",
      "public int hashCode() {",
      "\treturn Objects.hash(${1:field});",
      "}"
    ],
    "description": "Creates hashCode method"
  },
  "Equals and HashCode": {
    "prefix": "eqhc",
    "body": [
      "@Override",
      "public boolean equals(Object obj) {",
      "\tif (this == obj) return true;",
      "\tif (obj == null || getClass() != obj.getClass()) return false;",
      "\t${1:${TM_FILENAME_BASE}} that = (${1:${TM_FILENAME_BASE}}) obj;",
      "\treturn Objects.equals(${2:field}, that.${2:field});",
      "}",
      "",
      "@Override",
      "public int hashCode() {",
      "\treturn Objects.hash(${2:field});",
      "}"
    ],
    "description": "Creates equals and hashCode methods"
  },
  "Clone Method": {
    "prefix": "clone",
    "body": [
      "@Override",
      "protected ${1:${TM_FILENAME_BASE}} clone() throws CloneNotSupportedException {",
      "\treturn (${1:${TM_FILENAME_BASE}}) super.clone();",
      "}"
    ],
    "description": "Creates clone method"
  },
  "CompareTo Method": {
    "prefix": "comp",
    "body": [
      "@Override",
      "public int compareTo(${1:${TM_FILENAME_BASE}} other) {",
      "\treturn ${2:this.field}.compareTo(other.${2:field});",
      "}"
    ],
    "description": "Creates compareTo method for Comparable"
  },
  "Lambda Expression": {
    "prefix": "lamb",
    "body": ["(${1:param}) -> ${2:expression}"],
    "description": "Creates lambda expression"
  },
  "Lambda Block": {
    "prefix": "lambb",
    "body": ["(${1:param}) -> {", "\t$0", "\treturn ${2:result};", "}"],
    "description": "Creates lambda with block body"
  },
  "Method Reference": {
    "prefix": "mr",
    "body": ["${1:Class}::${2:method}"],
    "description": "Creates method reference"
  },
  "Constructor Reference": {
    "prefix": "cr",
    "body": ["${1:Class}::new"],
    "description": "Creates constructor reference"
  },
  "New Instance": {
    "prefix": "new",
    "body": ["new ${1:Object}(${2:parameters})"],
    "description": "Creates new instance"
  },
  "New Anonymous Class": {
    "prefix": "newanon",
    "body": [
      "new ${1:Interface}() {",
      "\t@Override",
      "\tpublic ${2:void} ${3:method}(${4:parameters}) {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Creates anonymous inner class"
  },
  "List Declaration": {
    "prefix": "list",
    "body": ["List<${1:String}> ${2:list} = new ArrayList<>();"],
    "description": "Creates ArrayList declaration"
  },
  "LinkedList Declaration": {
    "prefix": "llist",
    "body": ["List<${1:String}> ${2:list} = new LinkedList<>();"],
    "description": "Creates LinkedList declaration"
  },
  "Map Declaration": {
    "prefix": "map",
    "body": ["Map<${1:String}, ${2:Object}> ${3:map} = new HashMap<>();"],
    "description": "Creates HashMap declaration"
  },
  "TreeMap Declaration": {
    "prefix": "tmap",
    "body": ["Map<${1:String}, ${2:Object}> ${3:map} = new TreeMap<>();"],
    "description": "Creates TreeMap declaration"
  },
  "Set Declaration": {
    "prefix": "set",
    "body": ["Set<${1:String}> ${2:set} = new HashSet<>();"],
    "description": "Creates HashSet declaration"
  },
  "TreeSet Declaration": {
    "prefix": "tset",
    "body": ["Set<${1:String}> ${2:set} = new TreeSet<>();"],
    "description": "Creates TreeSet declaration"
  },
  "Queue Declaration": {
    "prefix": "queue",
    "body": ["Queue<${1:String}> ${2:queue} = new LinkedList<>();"],
    "description": "Creates Queue declaration"
  },
  "PriorityQueue Declaration": {
    "prefix": "pqueue",
    "body": ["PriorityQueue<${1:String}> ${2:queue} = new PriorityQueue<>();"],
    "description": "Creates PriorityQueue declaration"
  },
  "Deque Declaration": {
    "prefix": "deque",
    "body": ["Deque<${1:String}> ${2:deque} = new ArrayDeque<>();"],
    "description": "Creates Deque declaration"
  },
  "Stack Declaration": {
    "prefix": "stack",
    "body": ["Stack<${1:String}> ${2:stack} = new Stack<>();"],
    "description": "Creates Stack declaration"
  },
  "Array Declaration": {
    "prefix": "arr",
    "body": ["${1:int}[] ${2:array} = new ${1:int}[${3:size}];"],
    "description": "Creates array declaration"
  },
  "2D Array Declaration": {
    "prefix": "arr2d",
    "body": ["${1:int}[][] ${2:array} = new ${1:int}[${3:rows}][${4:cols}];"],
    "description": "Creates 2D array declaration"
  },
  "Array Initialization": {
    "prefix": "arrinit",
    "body": ["${1:int}[] ${2:array} = {${3:1, 2, 3}};"],
    "description": "Creates array with initialization"
  },
  "String Format": {
    "prefix": "sf",
    "body": ["String.format(\"${1:format}\", ${2:args})"],
    "description": "Creates String.format"
  },
  "StringBuilder": {
    "prefix": "sb",
    "body": [
      "StringBuilder ${1:sb} = new StringBuilder();",
      "${1:sb}.append(${2:text});",
      "String ${3:result} = ${1:sb}.toString();"
    ],
    "description": "Creates StringBuilder usage"
  },
  "StringBuffer": {
    "prefix": "sbuf",
    "body": [
      "StringBuffer ${1:sb} = new StringBuffer();",
      "${1:sb}.append(${2:text});",
      "String ${3:result} = ${1:sb}.toString();"
    ],
    "description": "Creates StringBuffer usage"
  },
  "StringJoiner": {
    "prefix": "sj",
    "body": [
      "StringJoiner ${1:joiner} = new StringJoiner(\"${2:, }\", \"${3:[}\", \"${4:]}\");",
      "${1:joiner}.add(${5:element});",
      "String ${6:result} = ${1:joiner}.toString();"
    ],
    "description": "Creates StringJoiner usage"
  },
  "Scanner Input": {
    "prefix": "scan",
    "body": [
      "Scanner ${1:scanner} = new Scanner(System.in);",
      "${2:String} ${3:input} = ${1:scanner}.next${4:Line}();",
      "${1:scanner}.close();"
    ],
    "description": "Creates Scanner for input"
  },
  "BufferedReader": {
    "prefix": "br",
    "body": [
      "try (BufferedReader ${1:reader} = new BufferedReader(new FileReader(\"${2:filename}\"))) {",
      "\tString ${3:line};",
      "\twhile ((${3:line} = ${1:reader}.readLine()) != null) {",
      "\t\t$0",
      "\t}",
      "} catch (IOException e) {",
      "\te.printStackTrace();",
      "}"
    ],
    "description": "Creates BufferedReader file reading"
  },
  "BufferedWriter": {
    "prefix": "bw",
    "body": [
      "try (BufferedWriter ${1:writer} = new BufferedWriter(new FileWriter(\"${2:filename}\"))) {",
      "\t${1:writer}.write(${3:text});",
      "\t${1:writer}.newLine();",
      "} catch (IOException e) {",
      "\te.printStackTrace();",
      "}"
    ],
    "description": "Creates BufferedWriter file writing"
  },
  "Files Read All Lines": {
    "prefix": "fread",
    "body": [
      "List<String> ${1:lines} = Files.readAllLines(Paths.get(\"${2:filename}\"));"
    ],
    "description": "Reads all lines from a file using Files API"
  },
  "Files Write": {
    "prefix": "fwrite",
    "body": [
      "Files.write(Paths.get(\"${1:filename}\"), ${2:content}.getBytes());"
    ],
    "description": "Writes to file using Files API"
  },
  "Path Operations": {
    "prefix": "path",
    "body": [
      "Path ${1:path} = Paths.get(\"${2:filepath}\");",
      "boolean ${3:exists} = Files.exists(${1:path});",
      "boolean ${4:isDirectory} = Files.isDirectory(${1:path});"
    ],
    "description": "Creates Path operations"
  },
  "Test Method (JUnit 5)": {
    "prefix": "test",
    "body": [
      "@Test",
      "void ${1:testMethodName}() {",
      "\t// Arrange",
      "\t${2:// Setup test data}",
      "",
      "\t// Act",
      "\t${3:// Execute method under test}",
      "",
      "\t// Assert"
    ]
  }
}
